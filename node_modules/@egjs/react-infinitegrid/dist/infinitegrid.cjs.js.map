{"version":3,"file":"infinitegrid.cjs.js","sources":["../src/consts.ts","../src/utils.ts","../src/InfiniteGrid.tsx","../src/grids/MasonryInfiniteGrid.tsx","../src/grids/JustifiedInfiniteGrid.tsx","../src/grids/FrameInfiniteGrid.tsx","../src/grids/PackingInfiniteGrid.tsx"],"sourcesContent":["\nexport const REACT_INFINITEGRID_EVENT_MAP = {\n  \"onContentError\": \"contentError\",\n  \"onRenderComplete\": \"renderComplete\",\n  \"onRequestAppend\": \"requestAppend\",\n  \"onRequestPrepend\": \"requestPrepend\",\n  \"onChangeScroll\": \"changeScroll\",\n} as const;\n\nexport const REACT_INFINITEGRID_EVENTS: string[] = [];\n\nfor (const name in REACT_INFINITEGRID_EVENT_MAP) {\n  REACT_INFINITEGRID_EVENTS.push(name);\n}\n\nexport const REACT_INFINITEGRID_PROPS = [\n  \"tag\",\n  \"placeholder\",\n  \"status\",\n  \"useFirstRender\",\n  \"loading\",\n  \"itemBy\",\n  \"groupBy\",\n  ...REACT_INFINITEGRID_EVENTS,\n];\n","export function isFunction(val: any): val is Function {\n  return typeof val === \"function\";\n}\n","/**\n * egjs-infinitegrid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport * as React from \"react\";\nimport VanillaInfiniteGrid, {\n  InfiniteGridOptions, InfiniteGridFunction,\n  Renderer,\n  InfiniteGridItemInfo, ITEM_TYPE,\n  InfiniteGridMethods,\n  withInfiniteGridMethods,\n  getRenderingItems,\n  mountRenderingItems,\n} from \"@egjs/infinitegrid\";\nimport { ReactInfiniteGridProps } from \"./types\";\nimport { REACT_INFINITEGRID_PROPS, REACT_INFINITEGRID_EVENT_MAP } from \"./consts\";\nimport { isFunction } from \"./utils\";\n\nexport abstract class InfiniteGrid<T extends InfiniteGridOptions>\n  extends React.Component<T & ReactInfiniteGridProps & { [key: string]: any }> {\n  public static GridClass: InfiniteGridFunction;\n  @withInfiniteGridMethods\n  private _grid!: VanillaInfiniteGrid;\n  private _wrapperRef = React.createRef<HTMLDivElement>();\n  private _containerRef = React.createRef<HTMLDivElement>();\n  private _renderer!: Renderer;\n\n  public render() {\n    const attributes: { [key: string]: any } = {};\n    const props = this.props;\n    const GridClass = (this.constructor as typeof InfiniteGrid).GridClass;\n    const defaultOptions = GridClass.defaultOptions;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const Tag = props.tag as any || \"div\";\n\n    for (const name in props) {\n      if (name in defaultOptions || REACT_INFINITEGRID_PROPS.indexOf(name as any) > -1) {\n        continue;\n      }\n      attributes[name] = props[name];\n    }\n\n    return <Tag ref={this._wrapperRef} {...attributes}>\n      {this._renderContainer()}\n    </Tag>;\n  }\n  public componentDidMount() {\n    const GridClass = (this.constructor as typeof InfiniteGrid).GridClass;\n    const defaultOptions = GridClass.defaultOptions;\n    const options: Partial<InfiniteGridOptions> = {};\n    const props = this.props;\n    const containerElement = this._containerRef.current;\n\n    for (const name in defaultOptions) {\n      if (name in props) {\n        (options as any)[name] = (props as any)[name];\n      }\n    }\n    if (containerElement) {\n      options.container = containerElement;\n    }\n    this._renderer = new Renderer();\n    options.renderer = this._renderer;\n    const grid = new GridClass(this._wrapperRef.current!, options);\n\n    for (const eventName in REACT_INFINITEGRID_EVENT_MAP) {\n      const nativeEventName = (REACT_INFINITEGRID_EVENT_MAP as any)[eventName];\n\n      grid.on(nativeEventName, (e: any) => {\n        const callback = this.props[eventName];\n\n        callback && callback(e);\n      });\n    }\n\n    this._grid = grid;\n    this._renderer.on(\"update\", () => {\n      this.setState({});\n    });\n\n    mountRenderingItems(this._getItemInfos(), {\n      grid,\n      useFirstRender: props.useFirstRender,\n      useLoading: props.loading,\n      usePlaceholder: props.placeholder,\n      horizontal: props.horizontal,\n      status: props.status,\n    });\n    this._renderer.updated();\n  }\n\n  public componentDidUpdate() {\n    const GridClass = (this.constructor as typeof InfiniteGrid).GridClass;\n    const propertyTypes = GridClass.propertyTypes;\n    const props = this.props;\n    const grid = this._grid;\n\n    for (const name in propertyTypes) {\n      if (name in props) {\n        (grid as any)[name] = (props as any)[name];\n      }\n    }\n    this._renderer.updated();\n  }\n\n  public componentWillUnmount() {\n    this._grid.destroy();\n  }\n\n  private _getItemInfos(): InfiniteGridItemInfo[] {\n    const props = this.props;\n    const children = React.Children.toArray(props.children) as React.ReactElement[];\n    const attributePrefix = props.attributePrefix || VanillaInfiniteGrid.defaultOptions.attributePrefix;\n    const itemBy = props.itemBy || ((item: React.ReactElement) => item.key);\n    const groupBy = props.groupBy || ((item: React.ReactElement) => item.props[`${attributePrefix}groupkey`]);\n\n    return children.map((child, i) => {\n      return {\n        groupKey: groupBy(child, i),\n        key: itemBy(child, i),\n        data: {\n          jsx: child,\n        },\n      };\n    });\n  }\n  private _renderContainer() {\n    const props = this.props;\n    const visibleChildren = this._getVisibleChildren();\n    const container = props.container;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const ContainerTag = props.containerTag as any || \"div\";\n\n    if (container === true) {\n      return <ContainerTag ref={this._containerRef}>\n        {visibleChildren}\n      </ContainerTag>;\n    } else {\n      return visibleChildren;\n    }\n  }\n  private _getVisibleChildren() {\n    const props = this.props;\n    const placeholder = props.placeholder;\n    const loading = props.loading;\n    const visibleItems = getRenderingItems(this._getItemInfos(), {\n      grid: this._grid,\n      status: props.status,\n      horizontal: props.horizontal,\n      useFirstRender: props.useFirstRender,\n      useLoading: props.loading,\n      usePlaceholder: props.placeholder,\n    });\n\n    return visibleItems.map((item) => {\n      if (item.type === ITEM_TYPE.VIRTUAL) {\n        return React.cloneElement(isFunction(placeholder) ? placeholder(item) : placeholder, { key: item.key });\n      } else if (item.type === ITEM_TYPE.LOADING) {\n        return React.cloneElement(isFunction(loading) ? loading(item) : loading, { key: item.key });\n      } else {\n        return item.data.jsx;\n      }\n    });\n  }\n}\nexport interface InfiniteGrid<T extends InfiniteGridOptions> extends InfiniteGridMethods<InfiniteGrid<T>> { }\n","import {\n  MasonryInfiniteGrid as VanillaMasonryInfiniteGrid,\n  MasonryInfiniteGridOptions,\n} from \"@egjs/infinitegrid\";\nimport { InfiniteGrid } from \"../InfiniteGrid\";\n\nexport class MasonryInfiniteGrid extends InfiniteGrid<MasonryInfiniteGridOptions> {\n  public static GridClass = VanillaMasonryInfiniteGrid;\n}\n","import {\n  JustifiedInfiniteGrid as VanillaJustifiedInfiniteGrid,\n  JustifiedInfiniteGridOptions,\n} from \"@egjs/infinitegrid\";\nimport { InfiniteGrid } from \"../InfiniteGrid\";\n\nexport class JustifiedInfiniteGrid extends InfiniteGrid<JustifiedInfiniteGridOptions> {\n  public static GridClass = VanillaJustifiedInfiniteGrid;\n}\n","import {\n  FrameInfiniteGrid as VanillaFrameInfiniteGrid,\n  FrameInfiniteGridOptions,\n} from \"@egjs/infinitegrid\";\nimport { InfiniteGrid } from \"../InfiniteGrid\";\n\nexport class FrameInfiniteGrid extends InfiniteGrid<FrameInfiniteGridOptions> {\n  public static GridClass = VanillaFrameInfiniteGrid;\n}\n","import {\n  PackingInfiniteGrid as VanillaPackingInfiniteGrid,\n  PackingInfiniteGridOptions,\n} from \"@egjs/infinitegrid\";\nimport { InfiniteGrid } from \"../InfiniteGrid\";\n\nexport class PackingInfiniteGrid extends InfiniteGrid<PackingInfiniteGridOptions> {\n  public static GridClass = VanillaPackingInfiniteGrid;\n}\n"],"names":["REACT_INFINITEGRID_EVENT_MAP","REACT_INFINITEGRID_EVENTS","name","push","REACT_INFINITEGRID_PROPS","isFunction","val","__extends","_this","React","attributes","props","GridClass","constructor","defaultOptions","Tag","tag","indexOf","ref","_wrapperRef","_renderContainer","options","containerElement","_containerRef","current","container","_renderer","Renderer","renderer","grid","eventName","nativeEventName","on","e","callback","_grid","setState","mountRenderingItems","_getItemInfos","useFirstRender","useLoading","loading","usePlaceholder","placeholder","horizontal","status","updated","propertyTypes","destroy","children","toArray","attributePrefix","VanillaInfiniteGrid","itemBy","item","key","groupBy","map","child","i","groupKey","data","jsx","visibleChildren","_getVisibleChildren","ContainerTag","containerTag","visibleItems","getRenderingItems","type","ITEM_TYPE","VIRTUAL","LOADING","__decorate","withInfiniteGridMethods","MasonryInfiniteGrid","VanillaMasonryInfiniteGrid","InfiniteGrid","JustifiedInfiniteGrid","VanillaJustifiedInfiniteGrid","FrameInfiniteGrid","VanillaFrameInfiniteGrid","PackingInfiniteGrid","VanillaPackingInfiniteGrid"],"mappings":"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"}